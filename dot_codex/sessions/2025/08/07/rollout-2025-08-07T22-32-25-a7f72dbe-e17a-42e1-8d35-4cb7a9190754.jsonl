{"id":"a7f72dbe-e17a-42e1-8d35-4cb7a9190754","timestamp":"2025-08-07T22:32:25.021Z","instructions":"# Eliah Project - Claude Notes\n\n## Technology Stack\n\n### Frontend\n\n- **Vue 3** with Composition API (script setup)\n- **Nuxt** for SSR and routing\n- **Vuetify 3** for UI components in platform and backoffice apps\n- **UnoCSS** for utility-first styling across all frontend apps\n  - Icons use the `i-[icon-set]:[icon]` syntax (e.g., `i-mdi-account`)\n  - Dark mode styling with `dark:` prefix (e.g., `dark:bg-gray-800`)\n- **Color Mode** - Dark/light mode support via `@nuxtjs/color-mode`\n  - Access via `const colorMode = useColorMode()`\n  - Values: 'light', 'dark', 'system'\n  - Uses cookies and client hints for SSR detection\n\n### Design System\n\n- **Built in**: `packages/nuxt-layer/src/components/`\n- **Documentation**: Histoire.dev for component stories and documentation\n  - Run `pnpm story:dev` in nuxt-layer directory\n  - Component stories located in `*.story.vue` files\n- **Key Dependencies**:\n  - **reka-ui**: Headless UI components (v2 of radix-vue)\n  - **class-variance-authority**: For variant-based component APIs\n  - **clsx & tailwind-merge**: Combined in `cn()` utility function at `#layer/utils/cn`\n  - **embla-carousel-vue**: Carousel functionality with touch/swipe support\n  - **embla-carousel-autoplay**: Autoplay plugin for carousels\n- **Component Naming**:\n  - `E` prefix: Eliah design system components (e.g., `EBtn`, `ELabel`)\n- **Current Components**:\n  - **EBtn**: Button component with variants (default, destructive, outline, secondary, link), loading states, icons, smart navigation, PostHog tracking\n  - **ECarousel**: Carousel system with embla-carousel-vue and autoplay support\n    - **ECarouselContent**: Scrollable content wrapper\n    - **ECarouselItem**: Individual slide wrapper\n    - **ECarouselNext**: Next navigation button\n    - **ECarouselPrevious**: Previous navigation button\n    - Features: Touch/swipe support, keyboard navigation, autoplay, responsive sizing, API access\n  - **EMenu**: Dropdown menu system with trigger, content, items, groups, separators, and sub-menus\n  - **EAvatar**: Avatar component with image and fallback support\n  - **EBadge**: Badge component with variants (default, secondary, destructive, outline)\n  - **EPopover**: Popover system with trigger, content, and portal rendering\n  - **ECommand**: Command palette with search, filtering, and keyboard navigation\n  - **EDialog**: Modal dialog system with content, header, title, and description\n  - **ETooltip**: Tooltip system with provider, trigger, content, and positioning\n  - **ESeparator**: Semantic separator with horizontal/vertical orientations\n  - **EHoverCard**: Hover card system with trigger, content, and rich information display\n  - **EBreadcrumb**: Navigation breadcrumb system with links, separators, ellipsis, and dropdown integration\n\n### Backend\n\n- **Nitro** - Server engine for API\n- **tRPC** - Type-safe API layer\n- **Drizzle ORM** - Database ORM\n- **PostgreSQL** - Database\n\n### Project Structure\n\n- **Monorepo** with pnpm workspaces\n- **Apps**:\n  - `api`: Backend API service\n  - `platform`: Main user platform\n  - `backoffice`: Admin interface\n  - `pdf_viewer`: PDF viewing component\n  - `questionnaire`: Quiz/questionnaire app\n  - `vitrine`: Marketing/showcase site\n  - `worker`: Background task worker\n\n## Development Commands\n\n- `pnpm lint:fix` - Run ESLint checks and fix issues (preferred over `pnpm lint`)\n- `pnpm lint:staged` - Run ESLint only on staged files (fast pre-commit check)\n- `pnpm lint:staged:fix` - Run ESLint and fix issues only on staged files (fast pre-commit fix)\n- ⚠️ Avoid `pnpm typecheck` during development (too time-consuming)\n\n## Project Terminology\n\n- Always use \"participation\" instead of \"adhésion\"\n- Use \"participer\" instead of \"adhérer\"\n\n## Logs files (gitignored)\n\n- `.logs/app.log` : API logs\n- `.logs/worker.log` : Worker logs\n\n## Database querying\n\nYou can execute raw SQL queries to the database using `docker compose exec postgres psql -U postgres -d eliah -c \"...\"`\nShemas :\n- public : the main database schema\n- graphile_worker : the worker database schema\n\n## AI generation instructions\n\n- Avoid using inline code comments when generating code. Prefer adding JSDoc comments instead.\n\n## Graphic charter\n\n### Colors\n\n- Primary : void - #292043\n- Secondary : lavender - #BEABD3\n- Tertiary : Gradient lemon to sunset - #FCEA10 to #E9A400\n\nRoue ascension (in case you want to use roue ascension theme) :\n- Amour de soi : #fe0001\n- Liberté d'être : #fcc622\n- Souveraineté : #ff2cc7\n- Unité : #5dc2da\n\n### Font\n\n- Gravity (font-gravity)\n- Laviossa (font-laviossa)\n- Skia (font-skia)\n- Ubuntu (font-ubuntu)\n\n## Nuxt auto imports\n\nNuxt auto imports have been disabled.\nHere is the imports you might need:\nimport { ref, reactive, computed, readonly, shallowRef, toRef, toRefs, triggerRef } from 'vue'\nimport { watch, watchEffect, watchSyncEffect, watchPostEffect } from 'vue'\nimport { onMounted, onUnmounted, onBeforeMount, onBeforeUnmount, onUpdated, onBeforeUpdate } from 'vue'\nimport { onActivated, onDeactivated, onErrorCaptured, onRenderTracked, onRenderTriggered } from 'vue'\nimport { useTemplateRef, useId, useCssVars, useSlots, useAttrs } from 'vue'\nimport { nextTick, defineComponent, defineAsyncComponent } from 'vue'\nimport { provide, inject, hasInjectionContext } from 'vue'\nimport { getCurrentInstance, getCurrentScope, onScopeDispose } from 'vue'\nimport { markRaw, isRef, unref, isReactive, isReadonly, isProxy } from 'vue'\nimport type { Ref, ComputedRef, WritableComputedRef, ToRefs, UnwrapRef } from 'vue'\nimport { useVModel, useResizeObserver, onClickOutside, watchDebounced, watchThrottled, createReusableTemplate, useToggle } from '@vueuse/core'\nimport { useIntervalFn, useDebouncedRefHistory, useWindowSize, until, whenever } from '@vueuse/core'\nimport { useLocalStorage, useSessionStorage, usePreferredDark, useColorMode } from '@vueuse/core'\nimport { useMouse, useMousePressed, useKeyModifier, useActiveElement } from '@vueuse/core'\nimport { useNow, useDateFormat, useTimeAgo, useTimestamp } from '@vueuse/core'\nimport { useAsyncState, useToggle, useCounter, useClipboard } from '@vueuse/core'\nimport { useEventListener, useEventSource, useFetch, useWebSocket } from '@vueuse/core'\nimport { defineNuxtPlugin, defineNuxtRouteMiddleware, defineNuxtConfig } from '#imports'\nimport { useNuxtApp, useNuxtData, clearNuxtData, refreshNuxtData } from '#imports'\nimport { useLazyAsyncData, useAsyncData, useLazyFetch, useFetch } from '#imports'\n// Do not use useSeoMeta with nuxt autoImports disabled, it doesn't work\nimport { useHead, useHeadSafe } from '#imports'\nimport { createError, showError, clearError, isNuxtError } from '#imports'\nimport { setPageLayout, usePageMeta } from '#imports'\nimport { navigateTo, abortNavigation, addRouteMiddleware } from '#imports'\nimport { preloadComponents, prefetchComponents, preloadRouteComponents } from '#imports'\nimport { reloadNuxtApp, useRequestEvent, useRequestURL } from '#imports'\nimport { useCookie, useRoute, useRouter } from '#imports'\nimport { callOnce, useHydration, useNuxtDevtools } from '#imports'\nimport { useState, useStatefulCookie, createSharedComposable } from '#imports'\nimport { useColorMode, definePageMeta, useRuntimeConfig, useRequestHeader } from '#imports'\nimport { defineStore, acceptHMRUpdate, storeToRefs, mapStores, mapState, mapActions } from 'pinia'\nimport { getActivePinia, setActivePinia, createPinia } from 'pinia'\nimport { useSnackbarStore } from '~/stores/snackbar'\nimport { useFormationStore } from '~/stores/formation'\nimport { useTopMessageStore } from '~/stores/topMessage'\nimport { useTRPC, useTrpc } from '#layer/composables/trpc'\nimport { useTRPCClientErrorParser } from '#layer/composables/trpcClientErrorParser'\nimport { useAuthStore, useAuthStoreRefs } from '#layer/composables/authStore'\nimport { guessVitrineUrl, guessPlateformeUrl } from '#layer/utils/urls'\nimport { useToast } from '#layer/composables/toast'\nimport { usePostHog } from '#layer/composables/posthog'\nimport { useAppName } from '#layer/composables/appName'\nimport { useForm, useField, defineRule, configure } from 'vee-validate'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport { z } from 'zod'\nimport { defineEventHandler, readBody, setResponseStatus, setCookie, deleteCookie } from 'h3'\nimport { getQuery, getRouterParam, getRouterParams, getValidatedQuery } from 'h3'\nimport { createError as createH3Error, sendRedirect, setHeader, getHeader } from 'h3'\nimport { readFormData, readMultipartFormData, readRawBody } from 'h3'\nimport { useTheme, useDisplay, useLocale, useRtl } from 'vuetify'\nimport { useDate } from 'vuetify/labs/date'\nimport { usePreviewEnvironment } from '~/composables/preview'\nimport { useProdTools } from '~/composables/prod'\nimport { useStripe } from '~/composables/stripe'\nimport { useTopMessage } from '~/composables/topMessage'\nimport { useUrls } from '~/composables/urls'\nimport { joinURL, withQuery, parseURL, stringifyParsedURL } from 'ufo'\nimport { defu, defuFn } from 'defu'\nimport { klona } from 'klona'\nimport { nanoid } from 'nanoid'\nimport { debounce, throttle, omit, pick, merge, cloneDeep } from 'lodash-es'\nimport { format, addDays, subDays, startOfDay, endOfDay, isAfter, isBefore } from 'date-fns'\nimport { vMaska } from 'maska/vue'\nimport { TransitionGroup, Transition } from 'vue'\nimport { until, promiseTimeout, createSingletonPromise } from '@vueuse/core'\nimport type { RouteLocationNormalized, Router } from 'vue-router'\nimport type { NuxtApp, RuntimeConfig } from '#imports'\nimport type { CookieOptions, CookieRef } from '#imports'\nimport type { AsyncData, AsyncDataOptions } from '#imports'\nimport type { FetchError } from 'ofetch'\nimport type { Component, ComponentPublicInstance } from 'vue'\nimport type { MaybeRef, MaybeRefOrGetter, Awaitable } from '@vueuse/core'\nimport type { ComputedGetter, WritableComputedOptions } from 'vue'\nimport { required, email, maxLength, minLength, url, siret } from '@eliah/common/form'\nimport type { User, BusinessDetails } from '@eliah/backend/db'\nimport type { RouterOutput, RouterInput } from '@eliah/backend/trpc'\nimport type { Stripe } from '@eliah/backend/stripe'\nimport { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'\nimport { mount, shallowMount } from '@vue/test-utils'\nimport { isDevelopment, isProduction } from 'std-env'\nimport { useStore } from '~/stores'\nimport { defineOrganization, defineWebPage, defineWebSite, useSchemaOrg } from '#imports'\n","git":{"commit_hash":"58b4d16859d00fa2bc591ea1665c6ebaeab53bb0","branch":"main","repository_url":"git@github.com:leo91000/eliah.git"}}
{"record_type":"state"}
{"type":"message","id":null,"role":"user","content":[{"type":"input_text","text":"Generate a file named AGENTS.md that serves as a contributor guide for this repository.\nYour goal is to produce a clear, concise, and well-structured document with descriptive headings and actionable explanations for each section.\nFollow the outline below, but adapt as needed — add sections if relevant, and omit those that do not apply to this project.\n\nDocument Requirements\n\n- Title the document \"Repository Guidelines\".\n- Use Markdown headings (#, ##, etc.) for structure.\n- Keep the document concise. 200-400 words is optimal.\n- Keep explanations short, direct, and specific to this repository.\n- Provide examples where helpful (commands, directory paths, naming patterns).\n- Maintain a professional, instructional tone.\n\nRecommended Sections\n\nProject Structure & Module Organization\n\n- Outline the project structure, including where the source code, tests, and assets are located.\n\nBuild, Test, and Development Commands\n\n- List key commands for building, testing, and running locally (e.g., npm test, make build).\n- Briefly explain what each command does.\n\nCoding Style & Naming Conventions\n\n- Specify indentation rules, language-specific style preferences, and naming patterns.\n- Include any formatting or linting tools used.\n\nTesting Guidelines\n\n- Identify testing frameworks and coverage requirements.\n- State test naming conventions and how to run tests.\n\nCommit & Pull Request Guidelines\n\n- Summarize commit message conventions found in the project’s Git history.\n- Outline pull request requirements (descriptions, linked issues, screenshots, etc.).\n\n(Optional) Add other sections if relevant, such as Security & Configuration Tips, Architecture Overview, or Agent-Specific Instructions.\n"}]}
{"record_type":"state"}
