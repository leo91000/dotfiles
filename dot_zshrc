# Check if oh-my-zsh is installed; if not, install it
export ZSH="$HOME/.oh-my-zsh"
if [ ! -d "$ZSH" ]; then
  echo "Installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd nomatch
unsetopt beep extendedglob notify
autoload -Uz compinit
compinit

typeset -U path cdpath fpath manpath

for profile in ${(z)NIX_PROFILES}; do
  fpath+=($profile/share/zsh/site-functions $profile/share/zsh/$ZSH_VERSION/functions $profile/share/zsh/vendor-completions)
done

# Install zsh-autosuggestions if not already installed
if [ ! -d "${ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-autosuggestions" ]; then
  echo "Installing zsh-autosuggestions..."
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-autosuggestions
fi

# Install zsh-history-substring-search if not already installed
if [ ! -d "${ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-history-substring-search" ]; then
  echo "Installing zsh-history-substring-search..."
  git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-history-substring-search
fi

plugins=(
  git
  npm
  docker
  zsh-autosuggestions
  zsh-history-substring-search
)

ZSH_THEME="robbyrussell"
source $ZSH/oh-my-zsh.sh

# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
unsetopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY

zstyle ":completion:*" menu select
zstyle ":completion:*" matcher-list "" "m:{a-z0A-Z}={A-Za-z}" "r:|=*" "l:|=* r:|=*"
if type nproc &>/dev/null; then
  export MAKEFLAGS="$MAKEFLAGS -j$(($(nproc)-1))"
fi
bindkey '^[[3~' delete-char                     # Key Del
bindkey '^[[5~' beginning-of-buffer-or-history  # Key Page Up
bindkey '^[[6~' end-of-buffer-or-history        # Key Page Down
bindkey '^[[1;3D' backward-word                 # Key Alt + Left
bindkey '^[[1;3C' forward-word                  # Key Alt + Right
bindkey '^[[H' beginning-of-line                # Key Home
bindkey '^[[F' end-of-line                      # Key End
bindkey '^H' backward-delete-word
# #neofetch
# export TERM='screen-256color'
if [ -f $HOME/.zshrc-personal ]; then
  source $HOME/.zshrc-personal
fi

# Automatically install tmux tpm if not present
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  echo "Installing tmux tpm..."
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

if [ "$TERM_PROGRAM" != "zed" ]; then
  if [ -z "$TMUX" ]; then
    # Ensure tpm plugins are installed and updated before starting tmux
    tmux_plugins_dir="$HOME/.tmux/plugins"
    tpm_dir="$tmux_plugins_dir/tpm"

    # Count the number of plugin directories excluding tpm
    plugin_count=$(fd --type d --max-depth 1 --exclude tpm . "$tmux_plugins_dir" | wc -l)

    if [ "$plugin_count" -eq 0 ]; then
      echo "Installing tmux plugins..."
      bash "$HOME/.tmux/plugins/tpm/scripts/install_plugins.sh" &>/dev/null
    fi

    tmux attach || tmux new-session
  fi
fi

# Aliases
alias ..='cd ..'
alias gA='git add -A'
alias ga='git add'
alias gb='git branch'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias gc='git commit'
alias gca='git commit -a'
alias gcam='git add -A && git commit -m'
alias gcl='git clone'
alias gcm='git commit -m'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gfrb='git fetch origin && git rebase origin/main'
alias ghci='gh run list -L 1'
alias gl='git log'
alias glo='git log --oneline --graph'
alias gmv='git mv'
alias gp='git push'
alias gpf='git push --force'
alias gpft='git push --follow-tags'
alias gpl='git pull --rebase'
alias grb='git rebase'
alias grbc='git rebase --continue'
alias grbom='git rebase origin/main'
alias grh='git reset HEAD'
alias grh1='git reset HEAD~1'
alias grm='git rm'
alias grt='cd "$(git rev-parse --show-toplevel)"'
alias gs='git status'
alias gsha='git rev-parse HEAD | pbcopy'
alias gst='git stash'
alias gx='git clean -df'
alias gxn='git clean -dn'
alias la='lsd -a'
alias lal='lsd -al'
alias ll='lsd -l'
alias ls='lsd'
alias main='git checkout main'
alias nd='nix develop -c $SHELL'
alias sv='sudo vim'
alias p='cd ~/projects'
alias v='nvim .'
alias r='source ~/.zshrc'
alias sudonvim='sudo XDG_CONFIG_HOME=$HOME/.config XDG_DATA_HOME=$HOME/.local/share nvim'
alias nd='nix develop -c $SHELL'
alias cm="chezmoi"
alias cme="chezmoi edit --apply"
alias cma="chezmoi add"
alias cmez="chezmoi edit --apply ~/.zshrc"
alias cmen="chezmoi edit --apply ~/.config/nvim"
alias cmezed="chezmoi edit ~/.config/zed"
alias cmazed="chezmoi add ~/.config/zed"
alias cmem="chezmoi edit --apply ~/.config/mise/config.toml"
alias cmam="chezmoi add --apply ~/.config/mise/config.toml"
alias cmu="chezmoi update"
alias cdl="cd ~/projects/leo91000"
alias wwcd='cd ~/projects/weweb'
alias wwcde='cd ~/projects/weweb/weweb-editor'
alias wwcdd='cd ~/projects/weweb/weweb-dashboard'
alias wwcdb='cd ~/projects/weweb/weweb-docker/weweb-back'
alias wwcdp='cd ~/projects/weweb/weweb-docker/weweb-publisher'
alias wwcda='cd ~/projects/weweb/weweb-assets'
alias node_modules_clear='fd node_modules -t d -I -X rm -rf'
alias node_reset_lockfile='node_modules_clear && rm -f package-lock.json && rm -f yarn.lock && rm -f pnpm-lock.yaml && npx --yes @antfu/ni@latest'

# Function to check for `staging` branch and pull changes
check_and_pull() {
  local project=$1
  echo "Checking project: $project"
  
  if [ -d "$project/.git" ]; then
    cd "$project" || return

    # Check for local changes
    if [ -z "$(git status --porcelain)" ]; then
      echo "No local changes detected on staging branch in $project. Pulling latest changes..."
      git pull
    else
      echo "Local changes detected in $project. Skipping pull."
    fi

    cd - > /dev/null || return
  else
    echo "$project is not a git repository. Skipping."
  fi
}

check_and_pull_all() {
    local projects=("$@")
    local commands=()
    local names=()
    
    for project in "${projects[@]}"; do
        commands+=("check_and_pull $project")
        # Extract the last part of the path for the name
        local name=$(basename "$project")
        names+=("check:$name")
    done
    
    npx -y concurrently --names \"${names[*]}\" \"${commands[*]}\"
}

wws() {
    local projects=(
        "~/projects/weweb/weweb-dashboard"
        "~/projects/weweb/weweb-editor"
        $(find ~/projects/weweb/weweb-docker -maxdepth 1 -type d -exec test -d {}/.git \; -print)
    )
    
    echo "Starting parallel pre-checks for staging branches..."
    check_and_pull_all "${projects[@]}"
    
    echo "Starting servers..."
    npx -y concurrently \
        --names "ww:editor,ww:dashboard,ww:back" \
        --prefix-colors "bgBlue.bold,bgGreen.bold,bgMagenta.bold" \
        "cd ~/projects/weweb/weweb-editor && npm run serve" \
        "cd ~/projects/weweb/weweb-dashboard && npm run serve" \
        "cd ~/projects/weweb/weweb-docker && docker compose up"
}

wwss() {
    local projects=(
        "~/projects/weweb/weweb-dashboard"
        "~/projects/weweb/weweb-editor"
        $(find ~/projects/weweb/weweb-docker -maxdepth 1 -type d -exec test -d {}/.git \; -print)
    )
    
    echo "Starting parallel pre-checks for staging branches..."
    check_and_pull_all "${projects[@]}"
    
    echo "Starting servers..."
    npx -y concurrently \
        --names "ww:editor,ww:dashboard" \
        --prefix-colors "bgBlue.bold,bgGreen.bold" \
        "cd ~/projects/weweb/weweb-editor && npm run serve:staging" \
        "cd ~/projects/weweb/weweb-dashboard && npm run serve:staging"
}

wwspp() {
    local projects=(
        "~/projects/weweb/weweb-dashboard"
        "~/projects/weweb/weweb-editor"
        $(find ~/projects/weweb/weweb-docker -maxdepth 1 -type d -exec test -d {}/.git \; -print)
    )
    
    echo "Starting parallel pre-checks for staging branches..."
    check_and_pull_all "${projects[@]}"
    
    echo "Starting servers..."
    npx -y concurrently \
        --names "ww:editor,ww:dashboard" \
        --prefix-colors "bgBlue.bold,bgGreen.bold" \
        "cd ~/projects/weweb/weweb-editor && npm run serve:preprod" \
        "cd ~/projects/weweb/weweb-dashboard && npm run serve:preprod"
}

function wwdevcc() {
  local commands=()
  local names=()
  local colors=()
  local ports=()
  local cert_paths=()
  local params=()
  local i=0

  for param in "$@"
  do
    local port=$((8080 + i))
    ports+=("$port")
    params+=("$param")
    local cmd="cd ~/projects/weweb/weweb-assets/ww-${param} && npm i && npm run serve port=${port}"
    commands+=("$cmd")
    names+=("ww:cc:${param}")

    local color_list=("red" "green" "yellow" "blue" "magenta" "cyan" "white" "gray")
    local color="${color_list[$i % ${#color_list[@]}]}"
    colors+=("$color")

    # Store the certificate path for each parameter
    local cert_path="$HOME/projects/weweb/weweb-assets/ww-${param}/node_modules/@weweb/cli/node_modules/.cache/webpack-dev-server/server.pem"
    cert_paths+=("$cert_path")

    ((i++))
  done

  # Join the names and colors into comma-separated strings
  local names_str="${(j:,:)names}"
  local colors_str="${(j:,:)colors}"

  # Kill all processes listening on the ports
  for port in "${ports[@]}"
  do
    # Find and kill processes listening on the port
    lsof -ti tcp:"$port" | xargs -r kill -9
  done

  # Run the commands concurrently with npx and capture the PID
  npx --yes concurrently --names "$names_str" --prefix-colors "$colors_str" "${commands[@]}" &
  local concurrently_pid=$!

  # Give the servers some time to start and generate certificates
  sleep 5

  # Import certificates into Chrome's NSS database
  echo "Importing certificates into Chrome's NSS database..."
  local index=1
  for cert_path in "${cert_paths[@]}"
  do
    local param="${params[$index]}"

    # Sanitize the nickname by replacing special characters
    local sanitized_param="${param//[: ]/_}"

    # Check if the certificate file exists
    if [[ -f "$cert_path" ]]; then
      # Convert PEM to DER format
      local der_cert="/tmp/ww-${sanitized_param}-cert.der"
      openssl x509 -in "$cert_path" -outform der -out "$der_cert"

      # Generate a unique nickname using the sanitized parameter name
      local cert_nickname="ww-${sanitized_param}-cert"

      # Delete any existing certificate with the same nickname to avoid conflicts
      certutil -d sql:"$HOME/.pki/nssdb" -D -n "$cert_nickname" 2>/dev/null

      # Import the certificate into Chrome's NSS database
      certutil -d sql:"$HOME/.pki/nssdb" -A -t "P,," -n "$cert_nickname" -i "$der_cert"

      # Clean up the DER certificate
      rm "$der_cert"

      echo "Imported $cert_nickname into Chrome's NSS database."
    else
      echo "Certificate not found at $cert_path"
    fi

    ((index++))
  done

  # Wait for the concurrently process to finish (optional)
  wait $concurrently_pid
}

# Make sure to use nvim as the default editor
export EDITOR=nvim

# Named Directory Hashes
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS+=()

bindkey "^[[A" history-substring-search-up
bindkey "^[[B" history-substring-search-down

if [ -f "$HOME/.cargo/env" ]; then
  source $HOME/.cargo/env
fi

PATH="$PATH":"$HOME/.local/scripts/"
bindkey -s ^p "tmux-sessionizer\n"

export MISE_NODE_COREPACK='true'
eval "$(mise activate zsh)"

[ -s "/home/leoc/.bun/_bun" ] && source "/home/leoc/.bun/_bun"


